Index: homework03/src/main/resources/db/changelog/1.0/2022-03-01--0001.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><databaseChangeLog\r\n        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\r\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n        xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"\r\n        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd\r\n        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\">\r\n\r\n    <changeSet id=\"2022-03-01--0001-authorsTableCreate\" author=\"ryanin\">\r\n        <preConditions onFail=\"MARK_RAN\">\r\n            <not>\r\n                <tableExists tableName=\"authors\"/>\r\n            </not>\r\n        </preConditions>\r\n\r\n        <createTable tableName=\"authors\">\r\n            <column name=\"id\" type=\"bigint\" autoIncrement=\"true\" remarks=\"Идентификатор автора\">\r\n                <constraints primaryKey=\"true\" nullable=\"false\"/>\r\n            </column>\r\n            <column name=\"name\" type=\"varchar(255)\" remarks=\"Имя автора\">\r\n                <constraints nullable=\"false\"/>\r\n            </column>\r\n            <column name=\"surname\" type=\"varchar(255)\" remarks=\"Фамилия автора\">\r\n                <constraints nullable=\"false\"/>\r\n            </column>\r\n        </createTable>\r\n    </changeSet>\r\n\r\n    <changeSet id=\"2022-03-01--0001-genresTableCreate\" author=\"ryanin\">\r\n        <preConditions onFail=\"MARK_RAN\">\r\n            <not>\r\n                <tableExists tableName=\"genres\"/>\r\n            </not>\r\n        </preConditions>\r\n\r\n        <createTable tableName=\"genres\">\r\n            <column name=\"id\" type=\"bigint\" autoIncrement=\"true\" remarks=\"Идентификатор жанра\">\r\n                <constraints primaryKey=\"true\" nullable=\"false\"/>\r\n            </column>\r\n            <column name=\"name\" type=\"varchar(255)\" remarks=\"Название жанра\">\r\n                <constraints nullable=\"false\"/>\r\n            </column>\r\n        </createTable>\r\n    </changeSet>\r\n\r\n    <changeSet id=\"2022-03-01--0001-booksTableCreate\" author=\"ryanin\">\r\n        <preConditions onFail=\"MARK_RAN\">\r\n            <not>\r\n                <tableExists tableName=\"books\"/>\r\n            </not>\r\n        </preConditions>\r\n\r\n        <createTable tableName=\"books\">\r\n            <column name=\"id\" type=\"bigint\" autoIncrement=\"true\" remarks=\"Идентификатор книги\">\r\n                <constraints primaryKey=\"true\" nullable=\"false\"/>\r\n            </column>\r\n            <column name=\"booktitle\" type=\"varchar(255)\" remarks=\"Название книги\">\r\n                <constraints nullable=\"false\"/>\r\n            </column>\r\n            <column name=\"bookauthorid\" type=\"bigint\" remarks=\"Идентификатор автора\">\r\n                <constraints nullable=\"false\" foreignKeyName=\"fk_bookauthorid\" references=\"authors(id)\"/>\r\n            </column>\r\n            <column name=\"bookgenreid\" type=\"bigint\" remarks=\"Идентификатор жанра\">\r\n                <constraints nullable=\"false\" foreignKeyName=\"fk_bookgenreid\" references=\"genres(id)\"/>\r\n            </column>\r\n        </createTable>\r\n    </changeSet>\r\n\r\n    <changeSet id=\"2022-03-11--0001-commentariesTableCreate\" author=\"ryanin\">\r\n        <preConditions onFail=\"MARK_RAN\">\r\n            <not>\r\n                <tableExists tableName=\"commentaries\"/>\r\n            </not>\r\n        </preConditions>\r\n\r\n        <createTable tableName=\"commentaries\">\r\n            <column name=\"id\" type=\"bigint\" autoIncrement=\"true\" remarks=\"Идентификатор книги\">\r\n                <constraints primaryKey=\"true\" nullable=\"false\"/>\r\n            </column>\r\n            <column name=\"name\" type=\"varchar(255)\" remarks=\"Название комментария\">\r\n                <constraints nullable=\"false\"/>\r\n            </column>\r\n            <column name=\"content\" type=\"varchar(255)\" remarks=\"Содержание комментария\">\r\n                <constraints nullable=\"false\"/>\r\n            </column>\r\n            <column name=\"book_id\" type=\"bigint\" remarks=\"Идентификатор жанра\">\r\n                <constraints nullable=\"false\" foreignKeyName=\"fk_book_id\" references=\"books(id)\" deleteCascade=\"true\"/>\r\n            </column>\r\n        </createTable>\r\n    </changeSet>\r\n\r\n</databaseChangeLog>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework03/src/main/resources/db/changelog/1.0/2022-03-01--0001.xml b/homework03/src/main/resources/db/changelog/1.0/2022-03-01--0001.xml
--- a/homework03/src/main/resources/db/changelog/1.0/2022-03-01--0001.xml	(revision 3aca8d93b3b68c3bf4b99a2936fb388ecd20e8de)
+++ b/homework03/src/main/resources/db/changelog/1.0/2022-03-01--0001.xml	(date 1650360450646)
@@ -1,9 +1,7 @@
 <databaseChangeLog
         xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-        xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
-        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd
-        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">
+        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">
 
     <changeSet id="2022-03-01--0001-authorsTableCreate" author="ryanin">
         <preConditions onFail="MARK_RAN">
@@ -88,4 +86,24 @@
         </createTable>
     </changeSet>
 
+    <changeSet id="2022-03-11--0001-usersTableCreate" author="ryanin">
+        <preConditions onFail="MARK_RAN">
+            <not>
+                <tableExists tableName="users"/>
+            </not>
+        </preConditions>
+
+        <createTable tableName="users">
+            <column name="id" type="bigint" autoIncrement="true" remarks="Идентификатор пользователя">
+                <constraints primaryKey="true" nullable="false"/>
+            </column>
+            <column name="login" type="varchar(255)" remarks="Название комментария">
+                <constraints nullable="false"/>
+            </column>
+            <column name="password" type="varchar(255)" remarks="Содержание комментария">
+                <constraints nullable="false"/>
+            </column>
+        </createTable>
+    </changeSet>
+
 </databaseChangeLog>
\ No newline at end of file
Index: homework03/src/test/java/ru/otus/homework03/rest/LibraryControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.otus.homework03.rest;\r\n\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.junit.jupiter.api.DisplayName;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\r\nimport org.springframework.boot.test.mock.mockito.MockBean;\r\nimport org.springframework.context.MessageSource;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport ru.otus.homework03.domain.Author;\r\nimport ru.otus.homework03.domain.Book;\r\nimport ru.otus.homework03.domain.Commentary;\r\nimport ru.otus.homework03.domain.Genre;\r\nimport ru.otus.homework03.dto.AuthorDto;\r\nimport ru.otus.homework03.dto.BookDto;\r\nimport ru.otus.homework03.dto.CommentaryDto;\r\nimport ru.otus.homework03.dto.GenreDto;\r\nimport ru.otus.homework03.generator.AuthorGenerator;\r\nimport ru.otus.homework03.generator.BookGenerator;\r\nimport ru.otus.homework03.generator.CommentaryGenerator;\r\nimport ru.otus.homework03.generator.GenreGenerator;\r\nimport ru.otus.homework03.service.LibraryService;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static org.mockito.ArgumentMatchers.any;\r\nimport static org.mockito.BDDMockito.given;\r\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\n@WebMvcTest(LibraryController.class)\r\n@DisplayName(\"Класс библиотечного контроллера должен: \")\r\nclass LibraryControllerTest {\r\n\r\n    @Autowired\r\n    private MockMvc mvc;\r\n\r\n    @MockBean\r\n    private LibraryService libraryService;\r\n    @MockBean\r\n    private MessageSource messageSource;\r\n    @Autowired\r\n    private ObjectMapper mapper;\r\n\r\n    private String asJsonString(final Object obj) {\r\n        try {\r\n            final ObjectMapper mapper = new ObjectMapper();\r\n            return mapper.writeValueAsString(obj);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"создать нового автора\")\r\n    void createNewAuthor() throws Exception {\r\n        Author author = new Author(\"Test\", \"Test\");\r\n        given(libraryService.createNewAuthor(author)).willReturn(AuthorGenerator.generateOptionalAuthor().get());\r\n        AuthorDto expectedResult = AuthorDto.toDto(AuthorGenerator.generateOptionalAuthor().get());\r\n\r\n        mvc.perform(post(\"/api/v1/author/\").content(asJsonString(author))\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .accept(MediaType.APPLICATION_JSON))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n\r\n    @Test\r\n    @DisplayName(\"возвращать автора по ID\")\r\n    void getAuthorById() throws Exception {\r\n        given(libraryService.getAuthorById(1L)).willReturn(AuthorGenerator.generateOptionalAuthor());\r\n        AuthorDto expectedResult = AuthorDto.toDto(AuthorGenerator.generateOptionalAuthor().get());\r\n\r\n        mvc.perform(get(\"/api/v1/author/1\"))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"возвращать список авторов\")\r\n    void getAllAuthors() throws Exception {\r\n        given(libraryService.getAllAuthors()).willReturn(AuthorGenerator.generateAuthorsList());\r\n        List<AuthorDto> expectedResult = AuthorGenerator.generateAuthorsList().stream()\r\n                .map(AuthorDto::toDto).collect(Collectors.toList());\r\n\r\n        mvc.perform(get(\"/api/v1/author/\"))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"обновлять автора\")\r\n    void updateAuthor() throws Exception {\r\n        Author author = new Author(1L, \"Test\", \"Test\");\r\n        given(libraryService.getAuthorById(1L)).willReturn(AuthorGenerator.generateOptionalAuthor());\r\n        given(libraryService.updateAuthor(author)).willReturn(author);\r\n        AuthorDto expectedResult = AuthorDto.toDto(author);\r\n        mvc.perform(put(\"/api/v1/author/\").content(asJsonString(author))\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .accept(MediaType.APPLICATION_JSON))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"удалять автора по ID\")\r\n    void deleteAuthor() throws Exception {\r\n        given(libraryService.getAuthorById(1L)).willReturn(AuthorGenerator.generateOptionalAuthor());\r\n        AuthorDto expectedResult = AuthorDto.toDto(AuthorGenerator.generateOptionalAuthor().get());\r\n        mvc.perform(delete(\"/api/v1/author/1\"))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"создать новый жанр\")\r\n    void createNewGenre() throws Exception {\r\n        Genre genre = new Genre(\"Test\");\r\n        given(libraryService.createNewGenre(genre)).willReturn(GenreGenerator.generateOptionalGenre().get());\r\n        GenreDto expectedResult = GenreDto.toDto(GenreGenerator.generateOptionalGenre().get());\r\n\r\n        mvc.perform(post(\"/api/v1/genre/\").content(asJsonString(genre))\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .accept(MediaType.APPLICATION_JSON))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"возвращать жанр по ID\")\r\n    void getGenreById() throws Exception {\r\n        given(libraryService.getGenreById(1L)).willReturn(GenreGenerator.generateOptionalGenre());\r\n        GenreDto expectedResult = GenreDto.toDto(GenreGenerator.generateOptionalGenre().get());\r\n\r\n        mvc.perform(get(\"/api/v1/genre/1\"))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"возвращать список жанров\")\r\n    void getAllGenres() throws Exception {\r\n        given(libraryService.getAllGenres()).willReturn(GenreGenerator.generateGenresList());\r\n        List<GenreDto> expectedResult = GenreGenerator.generateGenresList().stream()\r\n                .map(GenreDto::toDto).collect(Collectors.toList());\r\n\r\n        mvc.perform(get(\"/api/v1/genre/\"))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"обновлять жанр\")\r\n    void updateGenre() throws Exception {\r\n        Genre genre = new Genre(1L, \"Test\");\r\n        given(libraryService.getGenreById(1L)).willReturn(GenreGenerator.generateOptionalGenre());\r\n        given(libraryService.updateGenre(genre)).willReturn(genre);\r\n        GenreDto expectedResult = GenreDto.toDto(genre);\r\n        mvc.perform(put(\"/api/v1/genre/\").content(asJsonString(genre))\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .accept(MediaType.APPLICATION_JSON))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"удалять жанр по ID\")\r\n    void deleteGenre() throws Exception {\r\n        given(libraryService.getGenreById(1L)).willReturn(GenreGenerator.generateOptionalGenre());\r\n        GenreDto expectedResult = GenreDto.toDto(GenreGenerator.generateOptionalGenre().get());\r\n        mvc.perform(delete(\"/api/v1/genre/1\"))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"создать новый комментарий\")\r\n    void createNewCommentary() throws Exception {\r\n        Commentary commentary = new Commentary(\"Test\", \"Test\", BookGenerator.generateBookWithIdForAll());\r\n        CommentaryDto commentaryDto = new CommentaryDto(1L, \"Test\", \"Test\");\r\n        given(libraryService.getBookById(1L)).willReturn(BookGenerator.generateOptionalBook());\r\n        given(libraryService.createNewCommentary(commentary)).willReturn(CommentaryGenerator.generateOptionalCommentary().get());\r\n        CommentaryDto expectedResult = CommentaryDto.toDto(CommentaryGenerator.generateOptionalCommentary().get());\r\n\r\n        mvc.perform(post(\"/api/v1/commentary/\").content(asJsonString(commentaryDto))\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .accept(MediaType.APPLICATION_JSON))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"возвращать комментарий по ID\")\r\n    void getCommentaryById() throws Exception {\r\n        given(libraryService.getCommentaryById(1L)).willReturn(CommentaryGenerator.generateOptionalCommentary());\r\n        CommentaryDto expectedResult = CommentaryDto.toDto(CommentaryGenerator.generateOptionalCommentary().get());\r\n\r\n        mvc.perform(get(\"/api/v1/commentary/1\"))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"возвращать список комментариев по ID книги\")\r\n    void getAllCommentary() throws Exception {\r\n        given(libraryService.getAllCommentariesByBookId(1L)).willReturn(CommentaryGenerator.generateCommentaryList());\r\n        List<CommentaryDto> expectedResult = CommentaryGenerator.generateCommentaryList().stream()\r\n                .map(CommentaryDto::toDto).collect(Collectors.toList());\r\n\r\n        mvc.perform(get(\"/api/v1/commentaries/1\"))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"обновлять комментарий\")\r\n    void updateCommentary() throws Exception {\r\n        Commentary commentary = new Commentary(1, \"Test\", \"Test\", BookGenerator.generateBookWithIdForAll());\r\n        CommentaryDto commentaryDto = new CommentaryDto(1L, 1, \"Test\", \"Test\");\r\n        given(libraryService.getBookById(1L)).willReturn(BookGenerator.generateOptionalBook());\r\n        given(libraryService.getCommentaryById(1L)).willReturn(CommentaryGenerator.generateOptionalCommentary());\r\n        given(libraryService.updateCommentary(commentary)).willReturn(commentary);\r\n\r\n        mvc.perform(put(\"/api/v1/commentary/\").content(asJsonString(commentaryDto))\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .accept(MediaType.APPLICATION_JSON))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(commentaryDto)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"удалять комментарий по ID\")\r\n    void deleteCommentary() throws Exception {\r\n        given(libraryService.getCommentaryById(1L)).willReturn(CommentaryGenerator.generateOptionalCommentary());\r\n        CommentaryDto expectedResult = CommentaryDto.toDto(CommentaryGenerator.generateOptionalCommentary().get());\r\n        mvc.perform(delete(\"/api/v1/commentary/1\"))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"создать книгу\")\r\n    void createNewBook() throws Exception {\r\n        BookDto bookDto = new BookDto(\"someTitle\", \"Ivan\", \"Ivanov\", \"Horror\");\r\n        given(libraryService.createNewBook(BookDto.toDomainObject(bookDto))).willReturn(BookGenerator.generateOptionalBook().get());\r\n        BookDto expectedResult = BookDto.toDto(BookGenerator.generateOptionalBook().get());\r\n\r\n        mvc.perform(post(\"/api/v1/book/\").content(asJsonString(bookDto))\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .accept(MediaType.APPLICATION_JSON))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"возвращать книгу по ID\")\r\n    void getBookById() throws Exception {\r\n        given(libraryService.getBookById(1L)).willReturn(BookGenerator.generateOptionalBook());\r\n        BookDto expectedResult = BookDto.toDto(BookGenerator.generateOptionalBook().get());\r\n\r\n        mvc.perform(get(\"/api/v1/book/1\"))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"возвращать список книг\")\r\n    void getAllBooks() throws Exception {\r\n        given(libraryService.getAllBooks()).willReturn(BookGenerator.generateBooksList());\r\n        List<BookDto> expectedResult = BookGenerator.generateBooksList().stream()\r\n                .map(BookDto::toDto).collect(Collectors.toList());\r\n\r\n        mvc.perform(get(\"/api/v1/book/\"))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"обновлять книгу\")\r\n    void updateBook() throws Exception {\r\n        BookDto bookDto = new BookDto(1, \"newTitle\", \"Test\",\"Test\",\"Test\");\r\n        Book book = new Book(1, \"newTitle\", new Author(1, \"Test\",\"Test\"), new Genre(1,\"Test\"));\r\n        given(libraryService.getBookById(1L)).willReturn(BookGenerator.generateOptionalBook());\r\n        given(libraryService.updateBook(any())).willReturn(book);\r\n\r\n        mvc.perform(put(\"/api/v1/book/\").content(asJsonString(bookDto))\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .accept(MediaType.APPLICATION_JSON))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(bookDto)));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"удалять книгу по ID\")\r\n    void deleteBook() throws Exception {\r\n        given(libraryService.getBookById(1L)).willReturn(BookGenerator.generateOptionalBook());\r\n        BookDto expectedResult = BookDto.toDto(BookGenerator.generateOptionalBook().get());\r\n        mvc.perform(delete(\"/api/v1/book/1\"))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().json(mapper.writeValueAsString(expectedResult)));\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework03/src/test/java/ru/otus/homework03/rest/LibraryControllerTest.java b/homework03/src/test/java/ru/otus/homework03/rest/LibraryControllerTest.java
--- a/homework03/src/test/java/ru/otus/homework03/rest/LibraryControllerTest.java	(revision 3aca8d93b3b68c3bf4b99a2936fb388ecd20e8de)
+++ b/homework03/src/test/java/ru/otus/homework03/rest/LibraryControllerTest.java	(date 1650309141026)
@@ -3,11 +3,14 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
+import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
 import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.context.MessageSource;
 import org.springframework.http.MediaType;
+import org.springframework.security.test.context.support.WithMockUser;
+import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 import ru.otus.homework03.domain.Author;
 import ru.otus.homework03.domain.Book;
@@ -32,6 +35,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+@RunWith(SpringRunner.class)
 @WebMvcTest(LibraryController.class)
 @DisplayName("Класс библиотечного контроллера должен: ")
 class LibraryControllerTest {
@@ -56,6 +60,11 @@
     }
 
     @Test
+    @WithMockUser(
+            username = "admin",
+            password = "admin",
+            roles = "ADMIN"
+    )
     @DisplayName("создать нового автора")
     void createNewAuthor() throws Exception {
         Author author = new Author("Test", "Test");
Index: homework03/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.6.4</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <groupId>ru.otus</groupId>\r\n    <artifactId>homework03</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>homework03</name>\r\n\r\n    <properties>\r\n        <java.version>11</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>com.h2database</groupId>\r\n            <artifactId>h2</artifactId>\r\n            <version>1.4.200</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <optional>true</optional>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-jdbc</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.liquibase</groupId>\r\n            <artifactId>liquibase-core</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.yaml</groupId>\r\n            <artifactId>snakeyaml</artifactId>\r\n            <version>${snakeyaml.version}</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <finalName>${project.name}</finalName>\r\n        <resources>\r\n            <resource>\r\n                <directory>src/main/resources</directory>\r\n                <filtering>true</filtering>\r\n            </resource>\r\n        </resources>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n                <configuration>\r\n                    <addResources>true</addResources>\r\n                    <excludes>\r\n                        <exclude>\r\n                            <groupId>org.projectlombok</groupId>\r\n                            <artifactId>lombok</artifactId>\r\n                        </exclude>\r\n                    </excludes>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework03/pom.xml b/homework03/pom.xml
--- a/homework03/pom.xml	(revision 3aca8d93b3b68c3bf4b99a2936fb388ecd20e8de)
+++ b/homework03/pom.xml	(date 1650306751062)
@@ -67,6 +67,28 @@
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-web</artifactId>
         </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-thymeleaf</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-security</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.security</groupId>
+            <artifactId>spring-security-test</artifactId>
+            <version>${spring-security.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <scope>test</scope>
+        </dependency>
     </dependencies>
 
     <build>
